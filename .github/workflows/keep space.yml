name: 高级HF空间监控器

on:
  schedule:
    - cron: '0 1,7,13,19 * * *'
  workflow_dispatch:
    inputs:
      debug_mode:
        description: '启用调试模式'
        required: false
        type: boolean
        default: false
      force_notify:
        description: '强制发送通知'
        required: false
        type: boolean
        default: false

env:
  RETRY_ATTEMPTS: 3
  TIMEOUT_SECONDS: 30
  MAX_PARALLEL: 5
  SPACES_TO_MONITOR: |
    achm|https://latlpa-achm.hf.space
    agmn|https://latlpa-agmn.hf.space
    ngld|https://latlpa-ngld.hf.space

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      spaces_list: ${{ steps.set-matrix.outputs.spaces_list }}
      status: ${{ steps.set-matrix.outputs.status }}
      count: ${{ steps.set-matrix.outputs.count }}
    steps:
      - name: 准备监控矩阵
        id: set-matrix
        run: |
          set +e
          if [ -z "$SPACES_TO_MONITOR" ]; then
            echo "::error::SPACES_TO_MONITOR is empty"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "matrix={\"space\":[]}" >> $GITHUB_OUTPUT
            echo "spaces_list=无可用空间" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
            exit 1
          fi
          json_escape() {
            echo "$1" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g'
          }
          matrix_json='{"space":['
          spaces_list=""
          first=true
          count=0
          errors=0
          while IFS= read -r line; do
            if [ -n "$line" ] && [[ ! "$line" =~ ^[[:space:]]*# ]]; then
              IFS='|' read -r name url <<< "$line"
              name=$(echo "$name" | xargs)
              url=$(echo "$url" | xargs)
              if [ -n "$name" ] && [ -n "$url" ]; then
                if [[ ! "$url" =~ ^https?:// ]]; then
                  errors=$((errors + 1))
                  continue
                fi
                name_escaped=$(json_escape "$name")
                url_escaped=$(json_escape "$url")
                if [ "$first" = true ]; then
                  first=false
                else
                  matrix_json+=','
                  spaces_list+='\n'
                fi
                matrix_json+="{\"name\":\"$name_escaped\",\"url\":\"$url_escaped\"}"
                spaces_list+="- **${name}**: ${url}"
                count=$((count + 1))
              fi
            fi
          done <<< "$SPACES_TO_MONITOR"
          matrix_json+=']}'
          if command -v jq &> /dev/null; then
            if ! echo "$matrix_json" | jq empty 2>/dev/null; then
              echo "::error::Invalid JSON"
              echo "status=failed" >> $GITHUB_OUTPUT
              echo "matrix={\"space\":[]}" >> $GITHUB_OUTPUT
              echo "spaces_list=JSON解析失败" >> $GITHUB_OUTPUT
              echo "count=0" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
          if [ $count -eq 0 ]; then
            echo "::error::No valid spaces"
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "matrix={\"space\":[]}" >> $GITHUB_OUTPUT
            echo "spaces_list=无有效空间" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
          echo "spaces_list<<EOF" >> $GITHUB_OUTPUT
          echo -e "$spaces_list" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "count=$count" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 验证准备结果
        if: always()
        run: |
          if [ "${{ steps.set-matrix.outputs.status }}" != "success" ]; then
            echo "::error::Matrix preparation failed"
            exit 1
          fi

  monitor_spaces:
    needs: prepare
    if: needs.prepare.outputs.status == 'success'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJson(vars.MAX_PARALLEL || '5') }}
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
    continue-on-error: true
    steps:
      - name: 安装必要依赖
        id: install_deps
        continue-on-error: true
        run: |
          sudo apt-get update 2>/dev/null || true
          if ! command -v bc &> /dev/null; then
            sudo apt-get install -y bc 2>/dev/null && echo "bc_available=true" >> $GITHUB_OUTPUT || echo "bc_available=false" >> $GITHUB_OUTPUT
          else
            echo "bc_available=true" >> $GITHUB_OUTPUT
          fi

      - name: 健康检查与指标收集
        id: health_check
        continue-on-error: true
        run: |
          URL="${{ matrix.space.url }}"
          SUCCESS=false
          for attempt in 1 2 3; do
            if response=$(curl -sSf -o /dev/null -w '%{json}' --max-time ${{ env.TIMEOUT_SECONDS }} --connect-timeout 10 \
              -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
              -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
              "$URL" 2>/dev/null); then
              SUCCESS=true
              RESPONSE_TIME=$(echo $response | jq -r '.time_total // "0"')
              HTTP_CODE=$(echo $response | jq -r '.http_code // "000"')
              DNS_TIME=$(echo $response | jq -r '.time_namelookup // "0"')
              CONNECT_TIME=$(echo $response | jq -r '.time_connect // "0"')
              echo "status=success" >> $GITHUB_OUTPUT
              echo "response_time=$RESPONSE_TIME" >> $GITHUB_OUTPUT
              echo "http_code=$HTTP_CODE" >> $GITHUB_OUTPUT
              echo "attempt=$attempt" >> $GITHUB_OUTPUT
              echo "dns_time=$DNS_TIME" >> $GITHUB_OUTPUT
              echo "connect_time=$CONNECT_TIME" >> $GITHUB_OUTPUT
              if [ "${{ steps.install_deps.outputs.bc_available }}" = "true" ]; then
                response_time_ms=$(echo "$RESPONSE_TIME * 1000" | bc 2>/dev/null | cut -d. -f1)
                if [ -n "$response_time_ms" ] && [ "$response_time_ms" -gt 10000 ] 2>/dev/null; then
                  echo "performance=slow" >> $GITHUB_OUTPUT
                else
                  echo "performance=normal" >> $GITHUB_OUTPUT
                fi
              else
                response_time_int=${RESPONSE_TIME%.*}
                if [ -n "$response_time_int" ] && [ "$response_time_int" -ge 10 ] 2>/dev/null; then
                  echo "performance=slow" >> $GITHUB_OUTPUT
                else
                  echo "performance=normal" >> $GITHUB_OUTPUT
                fi
              fi
              break
            else
              [ $attempt -lt 3 ] && sleep $((attempt * 5))
            fi
          done
          if [ "$SUCCESS" = "false" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "response_time=N/A" >> $GITHUB_OUTPUT
            echo "http_code=000" >> $GITHUB_OUTPUT
            echo "performance=unknown" >> $GITHUB_OUTPUT
          fi

      - name: 智能重试
        id: retry
        if: steps.health_check.outputs.status == 'failure'
        continue-on-error: true
        run: |
          RETRY_SUCCESS=false
          for i in $(seq 1 ${{ env.RETRY_ATTEMPTS }}); do
            WAIT_TIME=$((2 ** i))
            sleep $WAIT_TIME
            for method in "GET" "HEAD"; do
              if curl -X $method -sSf --max-time 30 --connect-timeout 10 "${{ matrix.space.url }}" > /dev/null 2>&1; then
                RETRY_SUCCESS=true
                echo "retry_status=success" >> $GITHUB_OUTPUT
                echo "retry_method=$method" >> $GITHUB_OUTPUT
                echo "retry_attempt=$i" >> $GITHUB_OUTPUT
                break 2
              fi
            done
          done
          if [ "$RETRY_SUCCESS" = "false" ]; then
            echo "retry_status=failure" >> $GITHUB_OUTPUT
            echo "retry_method=none" >> $GITHUB_OUTPUT
            echo "retry_attempt=${{ env.RETRY_ATTEMPTS }}" >> $GITHUB_OUTPUT
          fi

      - name: 深度激活请求
        id: activation
        if: steps.health_check.outputs.status == 'success' || steps.retry.outputs.retry_status == 'success'
        continue-on-error: true
        run: |
          URL="${{ matrix.space.url }}"
          ACTIVATED_PATHS=""
          SUCCESS_COUNT=0
          TOTAL_COUNT=0
          paths=("/" "/docs" "/api" "/health" "/status" "/api/health" "/?__theme=light")
          for path in "${paths[@]}"; do
            TOTAL_COUNT=$((TOTAL_COUNT + 1))
            if curl -sSf --max-time 10 -H "User-Agent: Mozilla/5.0" "${URL}${path}" > /dev/null 2>&1; then
              ACTIVATED_PATHS="${ACTIVATED_PATHS}${path} "
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
            sleep 1
          done
          echo "activated_paths=$ACTIVATED_PATHS" >> $GITHUB_OUTPUT
          echo "activation_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
          echo "activation_total=$TOTAL_COUNT" >> $GITHUB_OUTPUT
          if [ "${{ steps.install_deps.outputs.bc_available }}" = "true" ]; then
            SUCCESS_RATE=$(echo "scale=2; $SUCCESS_COUNT * 100 / $TOTAL_COUNT" | bc)
            echo "activation_rate=${SUCCESS_RATE}%" >> $GITHUB_OUTPUT
          else
            echo "activation_rate=$SUCCESS_COUNT/$TOTAL_COUNT" >> $GITHUB_OUTPUT
          fi

      - name: 生成状态报告
        id: report
        if: always()
        run: |
          if [ "${{ steps.health_check.outputs.status }}" = "success" ]; then
            echo "final_status=✅ 健康" >> $GITHUB_OUTPUT
            echo "status_emoji=✅" >> $GITHUB_OUTPUT
            echo "numeric_status=1" >> $GITHUB_OUTPUT
          elif [ "${{ steps.retry.outputs.retry_status }}" = "success" ]; then
            echo "final_status=⚠️ 重试后恢复" >> $GITHUB_OUTPUT
            echo "status_emoji=⚠️" >> $GITHUB_OUTPUT
            echo "numeric_status=0" >> $GITHUB_OUTPUT
          else
            echo "final_status=❌ 异常" >> $GITHUB_OUTPUT
            echo "status_emoji=❌" >> $GITHUB_OUTPUT
            echo "numeric_status=-1" >> $GITHUB_OUTPUT
          fi

      - name: 保存监控日志
        if: always()
        continue-on-error: true
        run: |
          mkdir -p logs
          TIMESTAMP=$(TZ='Asia/Shanghai' date '+%Y%m%d_%H%M%S')
          cat > "logs/${{ matrix.space.name }}_${TIMESTAMP}.log" << EOF
          空间: ${{ matrix.space.name }}
          URL: ${{ matrix.space.url }}
          时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S CST')
          状态: ${{ steps.health_check.outputs.status }}
          响应: ${{ steps.health_check.outputs.response_time }}s
          HTTP: ${{ steps.health_check.outputs.http_code }}
          性能: ${{ steps.health_check.outputs.performance }}
          重试: ${{ steps.retry.outputs.retry_status || '未执行' }}
          激活: ${{ steps.activation.outputs.activation_count || '0' }}/${{ steps.activation.outputs.activation_total || '0' }}
          结果: ${{ steps.report.outputs.final_status }}
          EOF

      - name: 上传日志
        if: always()
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: monitor-log-${{ matrix.space.name }}-${{ github.run_id }}
          path: logs/*.log
          retention-days: 30

      - name: 记录详细指标
        if: always()
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## ${{ steps.report.outputs.status_emoji }} \`${{ matrix.space.name }}\`
          
          | 指标 | 值 |
          |------|-----|
          | URL | [${{ matrix.space.url }}](${{ matrix.space.url }}) |
          | 状态 | ${{ steps.report.outputs.final_status }} |
          | 响应时间 | ${{ steps.health_check.outputs.response_time || 'N/A' }}s |
          | HTTP | ${{ steps.health_check.outputs.http_code || 'N/A' }} |
          | 性能 | ${{ steps.health_check.outputs.performance == 'slow' && '🐌' || steps.health_check.outputs.performance == 'normal' && '🚀' || '❓' }} |
          | 重试 | ${{ steps.retry.outputs.retry_status == 'success' && '✅' || steps.retry.outputs.retry_status == 'failure' && '❌' || '➖' }} |
          | 激活率 | ${{ steps.activation.outputs.activation_rate || 'N/A' }} |
          ---
          EOF

  summary:
    needs: [prepare, monitor_spaces]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      issues: write
      contents: read
    steps:
      - name: 下载日志
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: all-logs
          pattern: monitor-log-*

      - name: 安全获取结果
        id: safe_prepare
        run: |
          SPACES_LIST="${{ needs.prepare.outputs.spaces_list }}"
          if [ -z "$SPACES_LIST" ] || [ "${{ needs.prepare.outputs.status }}" != "success" ]; then
            echo "spaces_list=⚠️ 无法获取空间列表" >> $GITHUB_OUTPUT
            echo "prep_failed=true" >> $GITHUB_OUTPUT
          else
            echo "spaces_list<<EOF" >> $GITHUB_OUTPUT
            echo "$SPACES_LIST" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "prep_failed=false" >> $GITHUB_OUTPUT
          fi
          echo "space_count=${{ needs.prepare.outputs.count }}" >> $GITHUB_OUTPUT

      - name: 统计结果
        id: stats
        run: |
          TOTAL="${{ steps.safe_prepare.outputs.space_count }}"
          if [ -d "all-logs" ]; then
            SUCCESS=$(find all-logs -name "*.log" -exec grep -l "数值状态: 1" {} \; 2>/dev/null | wc -l)
            DEGRADED=$(find all-logs -name "*.log" -exec grep -l "数值状态: 0" {} \; 2>/dev/null | wc -l)
            FAILED=$(find all-logs -name "*.log" -exec grep -l "数值状态: -1" {} \; 2>/dev/null | wc -l)
          else
            SUCCESS=0
            DEGRADED=0
            FAILED=0
          fi
          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT
          echo "degraded=$DEGRADED" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          if command -v bc &> /dev/null && [ "$TOTAL" -gt 0 ]; then
            SUCCESS_RATE=$(echo "scale=1; $SUCCESS * 100 / $TOTAL" | bc)
            echo "success_rate=${SUCCESS_RATE}%" >> $GITHUB_OUTPUT
          else
            echo "success_rate=$SUCCESS/$TOTAL" >> $GITHUB_OUTPUT
          fi

      - name: 收集监控结果
        id: collect
        run: |
          if [ "${{ steps.safe_prepare.outputs.prep_failed }}" = "true" ]; then
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "overall_status=❌ 监控准备失败" >> $GITHUB_OUTPUT
            echo "status_color=critical" >> $GITHUB_OUTPUT
          elif [ "${{ steps.stats.outputs.failed }}" != "0" ]; then
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "overall_status=⚠️ 部分空间存在问题" >> $GITHUB_OUTPUT
            echo "status_color=warning" >> $GITHUB_OUTPUT
          else
            echo "has_failures=false" >> $GITHUB_OUTPUT
            echo "overall_status=✅ 所有空间运行正常" >> $GITHUB_OUTPUT
            echo "status_color=success" >> $GITHUB_OUTPUT
          fi
          echo "timestamp=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S CST')" >> $GITHUB_OUTPUT
          echo "next_run_time=$(TZ='Asia/Shanghai' date -d '+6 hours' '+%Y-%m-%d %H:%M:%S CST' 2>/dev/null || echo '计算失败')" >> $GITHUB_OUTPUT

      - name: 生成总结报告
        run: |
          cat << 'EOF' >> $GITHUB_STEP_SUMMARY
          # 🎯 HF 空间监控总结
          
          ## 📈 总体状态
          **${{ steps.collect.outputs.overall_status }}**
          
          ## 📊 统计数据
          | 指标 | 数量 | 占比 |
          |------|------|------|
          | 总空间数 | ${{ steps.stats.outputs.total }} | 100% |
          | ✅ 健康 | ${{ steps.stats.outputs.success }} | ${{ steps.stats.outputs.success_rate }} |
          | ⚠️ 降级 | ${{ steps.stats.outputs.degraded }} | - |
          | ❌ 失败 | ${{ steps.stats.outputs.failed }} | - |
          
          ## ⏰ 时间信息
          - 执行时间: ${{ steps.collect.outputs.timestamp }}
          - 下次运行: ${{ steps.collect.outputs.next_run_time }}
          
          ## 📋 监控空间
          ${{ steps.safe_prepare.outputs.spaces_list }}
          
          ## 📊 配置
          - 空间数: ${{ steps.safe_prepare.outputs.space_count }}
          - 频率: 每6小时 (9/15/21/3点 CST)
          - 超时: ${{ env.TIMEOUT_SECONDS }}秒
          - 重试: ${{ env.RETRY_ATTEMPTS }}次
          - 并发: 最多${{ env.MAX_PARALLEL }}个
          
          ---
          *终极优化版 v3.0*
          EOF

      - name: 智能Issue管理
        if: github.event_name != 'workflow_dispatch' || inputs.force_notify
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const now = new Date();
            const beijingTime = new Date(now.getTime() + (8 * 60 * 60 * 1000));
            const date = beijingTime.toISOString().split('T')[0];
            const time = beijingTime.toISOString().split('T')[1].split('.')[0];
            const hasFailures = '${{ steps.collect.outputs.has_failures }}' === 'true';
            const stats = {
              total: '${{ steps.stats.outputs.total }}',
              success: '${{ steps.stats.outputs.success }}',
              degraded: '${{ steps.stats.outputs.degraded }}',
              failed: '${{ steps.stats.outputs.failed }}',
              rate: '${{ steps.stats.outputs.success_rate }}'
            };
            try {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'space-health',
                state: 'open',
                per_page: 10
              });
              const todayIssue = issues.data.find(i => i.title.includes(date));
              if (hasFailures) {
                const body = `## 🔄 更新 - ${time} CST\n\n` +
                  `📊 ${stats.success}/${stats.total} 健康 (${stats.rate}) | ⚠️ ${stats.degraded} | ❌ ${stats.failed}\n\n` +
                  `[详细日志](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
                if (todayIssue) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: todayIssue.number,
                    body: body
                  });
                } else {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `[监控告警] HF Space 异常 - ${date}`,
                    body: `## ⚠️ 监控告警\n\n` + body,
                    labels: ['automated', 'space-health', 'alert']
                  });
                }
              } else if (todayIssue) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: todayIssue.number,
                  state: 'closed'
                });
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: todayIssue.number,
                  body: `## ✅ 已恢复 - ${time} CST\n\n所有空间正常 (${stats.rate})`
                });
              }
            } catch (error) {
              console.error('Issue管理失败:', error.message);
            }

      - name: 生成状态徽章
        if: always()
        run: |
          case "${{ steps.collect.outputs.status_color }}" in
            "success") BADGE="brightgreen"; TEXT="healthy" ;;
            "warning") BADGE="orange"; TEXT="degraded" ;;
            "critical") BADGE="red"; TEXT="down" ;;
            *) BADGE="lightgrey"; TEXT="unknown" ;;
          esac
          cat << EOF >> $GITHUB_STEP_SUMMARY
          
          ## 📛 徽章
          [![HF Spaces](https://img.shields.io/badge/HF%20Spaces-${TEXT}-${BADGE}?logo=huggingface)](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions)
          [![Success](https://img.shields.io/badge/Success-${{ steps.stats.outputs.success_rate }}-${BADGE})](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions)
          [![Monitored](https://img.shields.io/badge/Monitored-${{ steps.stats.outputs.total }}%20spaces-blue)](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY})
          EOF
